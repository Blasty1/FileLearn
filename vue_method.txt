-   DIRETTIVE   -
v-if , v-else , v-else-if --> if di qualsiasi altro linguaggio
v-for= 'item in items' or '(item,key) in items' or 'item of items'  --> for di qualsiasi altro linguaggio
v-on:event-name='namefunctiontocall' -> quando fai un determinato evento si attiva la funzione contenuta nei methods del oggetto vue
v-bind:nameAttribute = nameVariable.



shorthands
v-on: --> @
v-bind: --> :


to create a template, app is a appVue
  app.component('nameTemplate', {
    props: ['variable'],
    template: `<li>{{ variable.property }}</li>`
  })

to createAppVue
  Vue.createApp(nameApp){{
  data(){
  variable1 : info,
  }
  methods{
   function (){dfdfdfdfsd}
  }
  computed{
  function(){}
  }
  
  watch(){
  }
  
  }}

Watch using
  in watch function we can write all stuffs that are actioned when a changing acts.

to create a component
  Vue.create({}).component('name_component' , {
    props: ['variableToUse'],
    template : `<h4>{{ variableToUse }}</h4>` });
    in HTML
      <name_component :variableToUse='variable'>dsd</name_component>

difference between computed and methods
  methods are always revaluted meanwhile computed uses cache and it is evaluted when the variable called changes.
  computed
    nameVariable:{
      get{
        return ...
      }
      set(newValue){
        return ..
      }
     }

to use variable outside HTML attribute 
  {{ variable }} //mustache
  v-bind:attributeHTML = 'variable'

to use a template in html
  <nameTemplate
      v-for="item in list"
      v-bind:nameVariable="item"
      v-bind:key="item.id"
    ></nameTemplate>


to relate a variable to a input or a html element
  v-model: 'nameVariable'
  v-model.number='nameVariable' --> to cast automatically to a number
  v-model.trim="nameVariable" --> to cast a string without spaces
  

to create a instance and to link the vue app with a element of HtMl
  Vue.createApp(nameVueApp).mount('.classNameElementHtml')
  
To Perfomance data in HTML
  v-bind:class = "if(hasError) 'errorClass' " --> :class = { hasError : 'errorClass' }
  :class = "[class1, class2]" --> to add multiple classes

to catch a particular event
  @nameEvent.stop
            .prevent
            .capture
            .self
            .once
            .passive
     
to call a specify nameTag and event
  @nameEvent.nameTag --> @nameEvent.enter="function()"
  
to create a own directive v-
  app.directive('nameDirective', {
  // When the bound element is mounted into the DOM...
  mounted(el,binding) {
    // Focus the element
    el.focus()
    binding.value //nameVariable;
    binding.arg //nameOpion
    }
  })
  in HTML
    v-nameDirective:[nameOption] = 'nameVariable'
    
https://v3.vuejs.org/guide/teleport.html#using-with-vue-components
