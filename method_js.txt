.forEach(value,key,array)

&& || ! return values
    a && b --> ritorna A se è falso, e B se A è vero [SE A È VERO ALLORA FACCIO B]
    a || b --> ritorna a è se è vero, altrimenti b (SE A È VERO LO RITORNO)

for(let key in array){ console.log(array[key])} --> utilizabile con tutti gli oggetti(Stringa, array, object) 

class Error
    throw new Error('errore bro') --> per generare un errore
Math
    Math.E --> e 
    Math.PI --> pigreco
    Math.sqrt --> radice quadrato
    Math.max() --> max 
    Math.abs --> numeri assoluti
    Math.pow() --> numeri elevati 
    Math.min() --> numeri più bassi
    math.round() --> per arrotondare
    Math.random() --> numeri random da 0 a 1

String(immutable, each method returns new string ) (UTF-16)
    stringa.charAt(0) or stringa[0] -> 'a' , ritorna il carattere
    stringa.substring(2,4) -> ritorn solo 3 e 4 
    stringa.slice(2,4) -> fa la stessa cosa
    stringa.indexOf('a') -> return the number position of letter a 
    stringa.split(" ") --> return substrings each space 
    stringa.replace("test","TEWST") -> replace the word test with TEWST
    parseInt((stringa)) --> return only number
    parseFloat(stringa) --> return onlu number with point, float number

Convertions of Object
    object.toString() --> array --> return the items divided by comma
                      --> function --> return source code
                      --> object --> return source code ([object Object])

Array 
    a.pop() -> rimuove item finale
    a.push() -> aggiunge item alla finale
    a.shift() -> rimuove item iniziale
    a.unshift() -> aggiunge item all'inizio

    for (let value_of_array of Array) --> simile al foreach in php
    array.forEach(function())

    (value in array) --> ritorna true se l'item c'è nell'oggetto(array)
    stringa.CharAt('index');
    stringa.replace(' ','-'); 
    a.splice(dove_parte,cosa_e limina,elementi_da_aggiungere...)
    a.slice(tostart,toend); -> subarray, tostart viene preso, toend non viene preso
    a.concat(other_array); -> concat two or more array
    a.indexOf(items_into_array) -> cerca un elemento e ritorna l'indice se non c'è ritorna -1
    a.includes(items_into_Array) -> serve per controllare se un elemento c'è oppure // NOTE:
    a.find(item => item.id == 1 ); --> ritorna true se lo trova e undefined se non lo trova
    a.filter(item => item.id == 'ab') --> ritornam l'array con tutti gli elementi che soddisfano la condizione (se non ce ne sono ritorna un array vuoto)
    a.sort() -> ritorna un array ordinato(in base all oggetto trattato come stringa)
    a.reverse()-> reverse the array
    a.split(' ')-> nella stringa datagli la divide e crea un array in base al carattere passato tra parentesi
    string.join('') -> da un array crea una stringa
    let ok = new Array(10) --> return an array with ten element

    Capire se è un array
        a.isArray() -> ritorna vero se è un isArray
        a instanceof Array --> ritorna true se è un array
    stringa.trim() -> rimuove gli spazi
    Array.from(valore) --> crea un array

Object 
    Attributi degli oggetti: ne sono tre
                            Object's prototype --> è un riferimento all'oggetto padre da cui proviene il nostro oggetto 
                            Object's class --> è una stringa che cataloga il tipo di un oggetto
                            Object's extensible --> indica se è possibile aggiungere proprietà 

    Attributi delle proprietà di un oggetto (sono 3)
                            writable --> se il valore della proprietà puo essere modificat0
                            enumerable --> se la proprietà proviene da un ciclo for-in
                            configurable --> se la proprietà puo essere eliminata o modificata

    Object.create(prototype_to_use,new_properties) --> crea un nuovo oggetto ereditanto il prototipo di un altro by reference --> se modifico l'oggetto di partenza modifico anche quello nuovo
    delete object.propetry;
    (propetry in object) --> ritorna falso se non c'è la proprietrà nell'oggetto o nei prototipi relazionati
    object.hasOwnProperty('name_of_property') --> ritorna true solo se l'oggetto possiede quella proprietà (non guarda i proptotipi ereditati)
    Object.getOwnPropertyDescriptor(object_to_search,'name_of_property') --> ritorna le quattro configurazioni della proprietà : value, writable,enumerable,configurable oppure get,set,enumerable,configurable
    Object.defineProperty(object,'name_of_property',{
        value = 'valore da assegnare',
        writable = true(se la possiamo modificare),
        configurable= true(se è configurabile successivamente),
        enumerable = false (se è nascosta durante i cicli),
        get : function() { body } (aggiungere un get privato alla proprietà)
        set : function () {body} (aggiungere un set privato alla proprietà)
    })
    Object.getPrototypeOf(object) --> return the prototype of a object
    object1.isPrototypeOf(objecy2) --> return if the prototype of first object is inheredit from the second object
    Object.keys(name_obj) --> ritorna tutte le key in un array
    Object.assign(obj_to,object_from) --> il secondo obj viene copiato nel primo
    Object.prototype.toString.call(obj).slice(8,-1) --> to get the class of object
    Object.isExtensible(object) --> return true if the extensible's attribute is true
    Object.preventExtension(obj) --> rende l'oggetto non pù estendibile e non si puo più cambiare
    Object.freeze(obj) --> rende l'oggetto non configurabile , read-only e nonextensible
    function.call(object) --> fa si che la funzione diventi un metodo dell'oggetto(ricordati di this)

Map 
    let new_array = a.map(x => return x*2) --> map ritorna un nuovo array senza modificare quello vecchio
    new Map('key' , value)
    map.set(key,value) ->nuovi valori aggiunti
    map.get(key) --> ottengo il valore
    map.has(key) --> ritorna true se esiste la key
    map.delete(key) --> elimina il valore
    map.size ->ritorna il numero degli elementi
    map.keys() -> tutte le keys
    map.values() -> tutti i valori
    new map(Object.entries(object)) --> trasforma da un oggetto a una Map
    Object.fromEntries(map) --> ritorna un array key :  values

Set(valori non si p ossono ripetere)
    set.add(valore) ritorna il valore
    set.delete(valore) ritorna true se lo elimina
    set.has(valore) ritorna true se ci sta nella Set
    set.size ritorna il numero degli elementi
    set.clear() rimuove tutti gli elementi

    set.keys() -> ritorna tutte i valori come un oggetto
    set.values() -> ritorna tutti i valori come un oggetto

WeakMap }  Servono perchè nel caso in cui un oggetti venga eliminato, si elimina pure all'interno della lista
WeakSet }

Date
    new Date() --> timestamp ora
    date().getTime() -> otteniamo la data in millisecondi
    new Date(Date.parse('stringa_contenente_data')) --> converto una semplice stringa in una data

JSON
    JSON.stringify(object) --> coodifica l'oggetto in una stringa
    JSON.parse(text) --> coodifica la stringa in un oggetto

Time
    setTimeout(function(senza parentesi),millisecondi,parametri della funzione) --> dopo tot secondi esegue la funzione
    setInterval(function, millisecondi, parametri) --> esegue la funzione con l'intervallo di tot millisecondi
    example:
            let id=setInterval(hello,10);
            setTimeout(() => clearInterval(id),5000);

DOM
    document.getElementById('id').style -> modifichiamo lo stile 
    document.getElementById('id').textContent='nuovo titolo' -> modifichiamo il testo all'interno
    document.querySelector('#id' or '.class') --> metodo più potente per selezionare roba e modificare
    document.querySelector('li:nth-child(numero_form)') --> selezionare all'interno di una lista 
    document.getElementsByClassName('collection-item'); --> ottengo un array 
    list.childNodes --> otteniamo tutti i figli di una classe, come un array di text e del contenuto
    list.children --> otteniamo dati html , è un oggetto
    list.parentNode --> rilascia l'oggetto superiore , codice html
    classList --> lista delle classi
    CREATE ELEMENT
            li=const li=document.createElement('li'); --> creo l'elemento
            li.className='collection-item'; --> aggiungo una classe
            li.id="new_item" --> aggiungo un ig
            li.setAttribute('title','New Item'); --> setto gli attributi
            li.appendChild(document.createTextNode('Hello world')); --> creo un node 
            document.querySelector('ul.collection').appendChild(li) -->il node lo appendo al div che ci interessa
    REPLACE 
            const newHeading=document.createElement('h2'); --> creo il nuovo elemento
            newHeading.id='task-title'; --> appendo ad un id
            newHeading.appendChild(document.createTextNode('Task List')); --> creo il node
            const oldHeading=document.getElementById('task-title'); --> ottengo il vecchio elemento
            const cardAction=document.querySelector('.card-action'); --> ottengo il parent del vecchio elemento
            cardAction.replaceChild(newHeading,oldHeading); --> replace the old element with the new element
    REMOVE
            obj.remove();
            obj.style.display='none';
    Event type
            obj.addEventListener(type_of_event,function(senza parentesi)) --> applicare un evento e una funzione a una classe
            mouseover ->mouse ci passa sopra
            click -> se clicchiamo
            dblclick --> doppio click

            input
            keydown --> quando si clicca avviene
            keyup --> dopo cliccato avviene
            focus --> quando schiacciamo o passiamo sopra 
            cut --> quando utilizziatmo taglia 
            paste --> quando copiamo qualcosa
            input --> tutto ciò che facciamo(una sorta di tutti gli eventi elencati in uno)

            